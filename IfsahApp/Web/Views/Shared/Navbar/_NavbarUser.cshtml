@* _Navbar.cshtml *@
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

<ul class="navbar-nav">

    <!-- Dev login (visible when not authenticated) -->
    <li class="nav-item">
        <a class="nav-link" asp-controller="DevLogin" asp-action="Index">
            <i class="bi bi-box-arrow-in-right me-1"></i>
              <span>@Localizer["Login"]</span>
        </a>
    </li>

    <!-- User dropdown (you can toggle display via JS/auth) -->
    <li class="nav-item dropdown" id="user-nav" style="display: none;">
        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-person-circle me-1"></i>
            <span>@Localizer["user"]</span>
        </a>
        <ul class="dropdown-menu">
            <li>
                <a class="dropdown-item" href="#">
                    <i class="bi bi-person me-2"></i>
                    <span>@Localizer["profile"]</span>
                </a>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <a class="dropdown-item" href="#">
                    <i class="bi bi-box-arrow-right me-2"></i>
                    <span>@Localizer["logout"]</span>
                </a>
            </li>
        </ul>
    </li>



@* Inject antiforgery and expose a meta tag for JS *@
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var tokens = Antiforgery.GetAndStoreTokens(Context);
}
<meta name="csrf-token" content="@tokens.RequestToken" />

<!-- Notifications Bell -->
<div class="d-flex justify-content-end mb-3 position-relative align-items-center gap-2">
  <span id="notifStatus" class="d-inline-block rounded-circle bg-secondary"
        title="Offline" style="width:10px;height:10px"></span>

  <!-- الجرس مع النقطة الخضراء -->
<button id="notifBtn" type="button" class="btn-notify" aria-label="@Localizer["Notifications"]" title="@Localizer["Notifications"]">
  <i class="bi bi-bell i-bell"></i>
  <span id="notifBadge" class="btn-notify__badge is-hidden">0</span>
</button>
  <!-- بانل الإشعارات بلون الثيم -->
  <div id="notifPanel" class="card shadow position-absolute"
       style="right:0; top:48px; width:340px; display:none; z-index:1080;
              background:var(--notif-card-bg); border-color:var(--notif-card-border);">
    <div class="card-header d-flex justify-content-between align-items-center py-2"
         style="background:var(--notif-card-bg); color:var(--notif-item-text);">
      <strong>@Localizer["Notifications"]</strong>
      <div class="d-flex gap-2">
        <form method="post" action="/Notifications/MarkAllRead" class="m-0 p-0">
          @Html.AntiForgeryToken()
          <button type="submit" class="btn btn-sm btn-outline-secondary">@Localizer["MarkAll"]</button>
        </form>
        <a href="/Notifications" class="btn btn-sm btn-outline-primary">@Localizer["ViewAll"]</a>
      </div>
    </div>

    <ul id="notifList" class="list-group list-group-flush" 
        style="max-height:320px; overflow:auto; background:var(--notif-item-bg); color:var(--notif-item-text);">
      <li class="list-group-item text-muted small" 
          style="background:var(--notif-item-bg); color:var(--notif-muted);">
        @Localizer["NoNotifications"]
      </li>
    </ul>
  </div>
</div>

<!-- Toast container -->
<div id="toastBox" class="position-fixed top-0 end-0 p-3" style="z-index:1080"></div>

<!-- JS options (reads token from <meta>) -->
<script>
  window.NOTIF_OPTS = {
    csrfHeaderName: 'RequestVerificationToken',
    csrfToken: document.querySelector('meta[name="csrf-token"]')?.content || ''
  };
</script>

<!-- ONE SignalR include -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.12/signalr.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const btn = document.getElementById("notifBtn");
  const panel = document.getElementById("notifPanel");
  const badge = document.getElementById("notifBadge");
  const list = document.getElementById("notifList");
  const status = document.getElementById("notifStatus");
  const csrf = window.NOTIF_OPTS.csrfToken;

  // Toggle
  btn.addEventListener("click", () => {
    panel.style.display = panel.style.display === "none" ? "block" : "none";
  });

  // Count
  async function refreshCount() {
    try {
      const res = await fetch("/Notifications/UnreadCount", { credentials: "same-origin" });
      const data = await res.json();
      if (data.count > 0) { badge.textContent = data.count; badge.classList.remove("d-none"); }
      else { badge.classList.add("d-none"); }
    } catch (e) { console.error(e); }
  }

  // List
  async function refreshList() {
    try {
      const res = await fetch("/Notifications/Unread", { credentials: "same-origin" });
      const items = await res.json();
      list.innerHTML = "";
      if (!items.length) {
        list.innerHTML = `<li class="list-group-item text-muted small"
                              style="background:var(--notif-item-bg);color:var(--notif-muted);">
                              @Localizer["NoNotifications"]</li>`;
        return;
      }
      items.forEach(n => {
        const li = document.createElement("li");
        li.className = "list-group-item d-flex justify-content-between align-items-start";
        li.style.background = "var(--notif-item-bg)";
        li.style.color = "var(--notif-item-text)";
        li.innerHTML = `
          <div>
            <strong>${n.title ?? "Notification"}</strong><br/>
            ${n.message ?? ""}
            <div class="text-muted small">${new Date(n.createdAt).toLocaleString()}</div>
          </div>
          <form method="post" action="/Notifications/MarkAsRead?id=${n.id}">
            <input type="hidden" name="__RequestVerificationToken" value="${csrf}" />
            <button class="btn btn-sm btn-link" title="Mark as read">✔</button>
          </form>
        `;
        list.appendChild(li);
      });
    } catch (e) { console.error(e); }
  }

  // SignalR
  const conn = new signalR.HubConnectionBuilder()
    .withUrl("/hubs/notifications")
    .build();

  conn.on("Notify", payload => {
    showToast(payload?.message || "New notification");
    refreshCount();
    refreshList();
  });

  conn.start().then(() => {
    status.classList.replace("bg-secondary", "bg-success");
    status.title = "Online";
    refreshCount();
    refreshList();
  }).catch(err => {
    status.classList.replace("bg-secondary", "bg-danger");
    status.title = "Error";
    console.error(err);
  });

  // Toast
  function showToast(msg) {
    const box = document.getElementById("toastBox");
    const div = document.createElement("div");
    div.className = "toast align-items-center border-0 show";
    div.style.background = "var(--notif-toast-bg)";
    div.style.color = "var(--notif-toast-text)";
    div.setAttribute("role", "alert");
    div.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${msg}</div>
        <button type="button" class="btn-close me-2 m-auto"
                data-bs-dismiss="toast" style="filter:invert(1);"></button>
      </div>`;
    box.appendChild(div);
    setTimeout(() => div.remove(), 4000);
  }
});
</script>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  const badge = document.getElementById("notifBadge");
  if (!badge) return;

  async function refreshUnread(){
    try{
      const res = await fetch("/Notifications/UnreadCount", { credentials: "same-origin" });
      const data = await res.json();
      const count = Number(data?.count ?? 0);

      if (count > 0){
        badge.textContent = count > 99 ? "99+" : String(count);
        badge.classList.remove("is-hidden");
      }else{
        badge.classList.add("is-hidden");
      }
    }catch{
      badge.classList.add("is-hidden");
    }
  }

  await refreshUnread();
  // (اختياري) حدّث كل دقيقة
  setInterval(refreshUnread, 60000);

  // (اختياري) مع SignalR
  // if (window.signalRConnection) window.signalRConnection.on("Notify", refreshUnread);
});
</script>


    <!-- Theme toggle -->
    <li class="nav-item p-2">
        <label class="toggle-theme">
            <input type="checkbox" id="theme-checkbox">
            <span class="slider"></span>
        </label>
    </li>

    <!-- Language Toggle -->
    <li class="nav-item p-2">
        <div class="language-toggle">
            @{
                var currentUrl = Context.Request.Path + Context.Request.QueryString;
            }

            @if (System.Threading.Thread.CurrentThread.CurrentCulture.Name.StartsWith("ar"))
            {
                <a asp-controller="Culture" asp-action="SetLanguage" asp-route-culture="en"
                   asp-route-returnUrl="@currentUrl" class="btn toggle-lang active">
                    عربي
                </a>
            }
            else
            {
                <a asp-controller="Culture" asp-action="SetLanguage" asp-route-culture="ar"
                   asp-route-returnUrl="@currentUrl" class="btn toggle-lang active">
                    English
                </a>
            }
        </div>
    </li>
</ul>


