@model IEnumerable<IfsahApp.Core.Models.Notification>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["NotificationsTitle"];
    var tokens = Antiforgery.GetAndStoreTokens(Context);
    var csrf = tokens.RequestToken;
}

<style>
  /* Light mode background */
  :root[data-bs-theme="light"] .notif-table {
    background-color: #f5f5f5;
  }

  /* Dark mode background (يستخدم ألوان بوتستراب الداكنة) */
  :root[data-bs-theme="dark"] .notif-table {
    background-color: var(--bs-body-bg);
  }

  /* رأس الجدول */
  .notif-table thead th {
    background-color: var(--bs-tertiary-bg);
    color: var(--bs-emphasis-color);
  }

  /* صفوف غير مقروء */
  .notif-table .table-warning {
    --bs-table-bg: color-mix(in srgb, var(--bs-warning) 15%, transparent);
    --bs-table-color: var(--bs-body-color);
  }
</style>

<!-- expose anti-forgery to JS (optional if already in _Layout) -->
<meta name="csrf-token" content="@csrf" />

<script>
  window.NOTIF_OPTS = { csrfHeaderName: 'RequestVerificationToken', csrfToken: '@csrf' };
  function csrfHeaders(){
    const h={};
    if(window.NOTIF_OPTS?.csrfHeaderName && window.NOTIF_OPTS?.csrfToken){
      h[window.NOTIF_OPTS.csrfHeaderName] = window.NOTIF_OPTS.csrfToken;
    }
    h['Accept'] = 'application/json';
    h['X-Requested-With'] = 'XMLHttpRequest';
    return h;
  }
</script>

<div class="d-flex justify-content-between align-items-center mb-3">
  <h3 class="mb-0">@Localizer["NotificationsTitle"]</h3>
  <button id="markAllBtn" class="btn btn-sm btn-outline-secondary">@Localizer["MarkAllAsRead"]</button>
</div>

<div class="table-responsive rounded-3 shadow-sm">
  <table class="table table-hover align-middle mb-0 notif-table">
    <thead>
      <tr>
        <th>@Localizer["Type"]</th>
        <th>@Localizer["Message"]</th>
        <th>@Localizer["Created"]</th>
        <th>@Localizer["Status"]</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
    @foreach (var n in Model)
    {
        <tr class="@(n.IsRead ? "" : "table-warning")" data-id="@n.Id">
          <td>@n.EventType</td>
          <td>@n.Message</td>
          <td>@n.CreatedAt.ToString("u")</td>
          <td>@(n.IsRead ? Localizer["Read"] : Localizer["Unread"])</td>
          <td class="text-end">
            @if (!n.IsRead)
            {
              <button class="btn btn-sm btn-outline-success mark-read">@Localizer["MarkAsRead"]</button>
            }
          </td>
        </tr>
    }
    </tbody>
  </table>
</div>

@section Scripts {
<script>
  // Mark one
  document.addEventListener('click', async (e) => {
    if (!e.target.matches('.mark-read')) return;
    const tr = e.target.closest('tr');
    const id = tr.getAttribute('data-id');

    try {
      const res = await fetch('/Notifications/MarkAsRead?id=' + encodeURIComponent(id), {
        method: 'POST',
        headers: csrfHeaders(),
        credentials: 'same-origin'
      });
      if (res.ok) {
        location.reload();
      } else if (res.status === 401) {
        window.location.href = '/DevLogin';
      } else {
        console.error('MarkAsRead failed', res.status);
      }
    } catch (err) {
      console.error(err);
    }
  });

  // Mark all
  document.getElementById('markAllBtn')?.addEventListener('click', async () => {
    try {
      const res = await fetch('/Notifications/MarkAllRead', {
        method: 'POST',
        headers: csrfHeaders(),
        credentials: 'same-origin'
      });
      if (res.ok) {
        location.reload();
      } else if (res.status === 401) {
        window.location.href = '/DevLogin';
      } else {
        console.error('MarkAllRead failed', res.status);
      }
    } catch (err) {
      console.error(err);
    }
  });
</script>
}
