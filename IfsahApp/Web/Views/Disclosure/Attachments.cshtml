@model IfsahApp.Core.ViewModels.DisclosureFormViewModel
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Attachments"];
    ViewData["Step"] = Model.Step;
}
@section StepTabs { @await Html.PartialAsync("_DisclosureTabs") }

<div class="container mt-5" style="max-width: 720px;">
    <h3>@ViewData["Title"]</h3>

    <form asp-action="Attachments" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label asp-for="Attachments" class="form-label">@Localizer["AttachmentsLabel"]</label>
            <input asp-for="Attachments"
                   id="attachments"
                   type="file"
                   multiple
                   class="form-control"
                   accept=".jpg,.jpeg,.png,.gif,.bmp,.mp4,.mov,.avi,.wmv,.mkv,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx" />
            <small class="text-muted">@Localizer["AllowedAttachmentTypesHint"] (Max 10MB each)</small>
            <span asp-validation-for="Attachments" class="text-danger"></span>
        </div>

        <!-- live preview of files chosen this POST -->
        <div id="previewList" class="mt-3"></div>

        <!-- already-uploaded files kept in TempData (SavedAttachmentPaths) -->
        <div class="mt-4">
            <h6 class="fw-bold">Current files</h6>
            @if (Model.SavedAttachmentPaths != null && Model.SavedAttachmentPaths.Any())
            {
                <ul class="list-unstyled mb-0">
                    @foreach (var f in Model.SavedAttachmentPaths)
                    {
                        <li>
                            <a href="~/tempUploads/@f" target="_blank">@f</a>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="text-muted">No files yet</div>
            }
        </div>

        <div class="d-flex justify-content-between mt-4">
            <!-- Back posts so the controller can save TempData before navigating -->
            <button type="submit" name="submitDir" value="back" class="btn btn-secondary">
                @Localizer["Back"]
            </button>

            <div class="d-flex gap-2">
                <!-- Upload keeps you on this page and refreshes the list -->
                <button type="submit" name="submitDir" value="upload" class="btn btn-outline-primary">
                    @Localizer["Upload"]
                </button>
                <!-- Next goes to Review -->
                <button type="submit" name="submitDir" value="next" class="btn btn-primary">
                    @Localizer["Next"]
                </button>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fileInput = document.getElementById('attachments');
            const previewList = document.getElementById('previewList');

            fileInput.addEventListener('change', function () {
                previewList.innerHTML = '';

                const allowed = {
                    images: ['jpg', 'jpeg', 'png', 'gif', 'bmp'],
                    videos: ['mp4', 'mov', 'avi', 'wmv', 'mkv']
                };

                const getExt = (fn) => (fn.split('.').pop() || '').toLowerCase();
                const iconFor = (ext) => {
                    if (allowed.images.includes(ext)) return 'bi-file-image text-primary';
                    if (allowed.videos.includes(ext)) return 'bi-file-play text-warning';
                    if (ext === 'pdf') return 'bi-file-earmark-pdf text-danger';
                    if (['doc', 'docx'].includes(ext)) return 'bi-file-earmark-word text-primary';
                    if (['xls', 'xlsx'].includes(ext)) return 'bi-file-earmark-excel text-success';
                    if (['ppt', 'pptx'].includes(ext)) return 'bi-file-earmark-powerpoint text-danger';
                    return 'bi-file-earmark text-secondary';
                };

                let files = Array.from(fileInput.files);
                let total = 0;

                files.forEach((file, idx) => {
                    if (!file || file.size === 0) return;
                    total += file.size;

                    const ext = getExt(file.name);
                    const iconCls = iconFor(ext);

                    const row = document.createElement('div');
                    row.className = 'd-flex align-items-center mb-2';

                    const iEl = document.createElement('i');
                    iEl.className = `bi ${iconCls} fs-3 me-2`;

                    const nameEl = document.createElement('span');
                    nameEl.textContent = file.name;

                    const sizeEl = document.createElement('span');
                    sizeEl.className = 'text-muted ms-3';
                    sizeEl.style.fontSize = '0.85rem';
                    sizeEl.textContent = `(${(file.size / (1024 * 1024)).toFixed(2)} MB)`;

                    const del = document.createElement('button');
                    del.type = 'button';
                    del.className = 'btn btn-outline-danger btn-sm ms-auto';
                    del.innerHTML = '&times;';
                    del.onclick = function () {
                        files.splice(idx, 1);
                        const dt = new DataTransfer();
                        files.forEach(f => dt.items.add(f));
                        fileInput.files = dt.files;
                        fileInput.dispatchEvent(new Event('change'));
                    };

                    row.append(iEl, nameEl, sizeEl, del);
                    previewList.appendChild(row);
                });

                if (files.length > 0) {
                    const sum = document.createElement('div');
                    sum.className = 'mt-2 fw-bold text-dark';
                    sum.textContent = `Total File Size: ${(total / (1024 * 1024)).toFixed(2)} MB`;
                    previewList.appendChild(sum);
                }
            });
        });
    </script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
}
