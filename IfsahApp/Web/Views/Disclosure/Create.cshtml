@model DisclosureFormViewModel
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["PageTitle"];
}

<div class="container mt-5" style="max-width: 600px;">
    <h3 class="text-start">@Localizer["PageTitle"]</h3>

    <form asp-action="Create" method="post" enctype="multipart/form-data" novalidate>
        <div class="mb-3">
            <label asp-for="DisclosureTypeId" class="form-label">@Localizer["ReportTypeLabel"]</label>
            <select asp-for="DisclosureTypeId" class="form-select"
                asp-items='@(new SelectList(ViewBag.DisclosureTypes, "Id", "Name"))'>
                <option value="">@Localizer["SelectReportTypeOption"]</option>
            </select>
            <span asp-validation-for="DisclosureTypeId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label">@Localizer["DescriptionLabel"]</label>
            <textarea asp-for="Description" rows="4" class="form-control"
                placeholder="@Localizer["DescriptionPlaceholder"]"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">@Localizer["ReportDateRangeLabel"]</label>
            <input id="dateRangePicker" type="text" class="form-control" autocomplete="off"
                placeholder="@Localizer["SelectDateRangePlaceholder"]" />

            <input type="hidden" asp-for="IncidentStartDate" />
            <input type="hidden" asp-for="IncidentEndDate" />

            <span asp-validation-for="IncidentStartDate" class="text-danger"></span>
            <span asp-validation-for="IncidentEndDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Location" class="form-label">@Localizer["ViolationLocationLabel"]</label>
            <input asp-for="Location" class="form-control" placeholder="@Localizer["ViolationLocationPlaceholder"]" />
            <span asp-validation-for="Location" class="text-danger"></span>
        </div>

        <div class="row hidden-section">
            <div class="col-md-6">
                <label class="form-label fw-bold">@Localizer["SuspectedPeopleLabel"]</label>
                <div id="suspected-people-list"></div>
                <button type="button" class="btn btn-outline-primary btn-sm mt-2" data-list="suspected-people-list"
                    onclick="openPersonModal(this)">@Localizer["AddSuspectedPersonButton"]</button>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">@Localizer["RelatedPeopleLabel"]</label>
                <div id="related-people-list"></div>
                <button type="button" class="btn btn-outline-primary btn-sm mt-2" data-list="related-people-list"
                    onclick="openPersonModal(this)">@Localizer["AddRelatedPersonButton"]</button>
            </div>
        </div>


        <div class="mb-3 mt-3">
            <label class="form-label">@Localizer["AttachmentsLabel"]</label>
            <input id="fileInput" name="Attachments" type="file" multiple class="form-control"
                accept=".jpg,.jpeg,.png,.gif,.bmp,.mp4,.mov,.avi,.wmv,.mkv,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx" />
            <small class="text-muted">@Localizer["AllowedAttachmentTypesHint"]</small>
            <div id="previewList" class="mt-3"></div>
        </div>

        <!-- Submit button here only -->
        <button type="submit" class="btn btn-success w-100">Submit Disclosure</button>
    </form>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

    <script>
        $(function () {
            $('#dateRangePicker').daterangepicker({
                autoUpdateInput: false,
                locale: {
                    cancelLabel: '@Localizer["CancelButton"]',
                    format: 'YYYY-MM-DD'
                }
            });

            $('#dateRangePicker').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
                $('input[name="IncidentStartDate"]').val(picker.startDate.format('YYYY-MM-DD'));
                $('input[name="IncidentEndDate"]').val(picker.endDate.format('YYYY-MM-DD'));
            });

            $('#dateRangePicker').on('cancel.daterangepicker', function () {
                $(this).val('');
                $('input[name="IncidentStartDate"]').val('');
                $('input[name="IncidentEndDate"]').val('');
            });
        });



    let modal;
        function openPersonModal(button) {
             modal = new bootstrap.Modal(document.getElementById('personModal'), {
             backdrop: true
            });
            document.getElementById('personForm').reset();
            document.getElementById('targetListId').value = button.getAttribute('data-list');
            modal.show();
        }

        function savePerson(event) {
            event.preventDefault();

            const name = document.getElementById('personName').value.trim();
            const email = document.getElementById('personEmail').value.trim();
            const phone = document.getElementById('personPhone').value.trim();
            const org = document.getElementById('personOrganization').value.trim();
            const listId = document.getElementById('targetListId').value;

            if (!name) {
                alert("@Localizer["NameRequiredAlert"]");
                return false;
            }

            const container = document.getElementById(listId);

            const div = document.createElement('div');
            div.classList.add('input-group', 'mb-2');

            const index = container.children.length;

            const inputName = document.createElement('input');
            inputName.type = 'text';
            inputName.name = listId === 'suspected-people-list'
                ? `SuspectedPersons[${index}].Name`
                : `RelatedPersons[${index}].Name`;
            inputName.className = 'form-control';
            inputName.value = name;
            inputName.readOnly = true;

            const hiddenEmail = document.createElement('input');
            hiddenEmail.type = 'hidden';
            hiddenEmail.name = inputName.name.replace('.Name', '.Email');
            hiddenEmail.value = email;

            const hiddenPhone = document.createElement('input');
            hiddenPhone.type = 'hidden';
            hiddenPhone.name = inputName.name.replace('.Name', '.Phone');
            hiddenPhone.value = phone;

            const hiddenOrg = document.createElement('input');
            hiddenOrg.type = 'hidden';
            hiddenOrg.name = inputName.name.replace('.Name', '.Organization');
            hiddenOrg.value = org;

            const btn = document.createElement('button');
            btn.type = 'button';
            btn.className = 'btn btn-outline-danger';
            btn.textContent = 'Ã—';
            btn.onclick = function () { div.remove(); };

            div.appendChild(inputName);
            div.appendChild(hiddenEmail);
            div.appendChild(hiddenPhone);
            div.appendChild(hiddenOrg);
            div.appendChild(btn);

            container.appendChild(div);

            modal.hide();
            return false;
        }

        // File Preview and Icons logic with delete functionality
        const fileInput = document.getElementById('fileInput');
        const previewList = document.getElementById('previewList');

        fileInput.addEventListener('change', function () {
            previewList.innerHTML = '';

            const allowedTypes = {
                images: ['jpg', 'jpeg', 'png', 'gif', 'bmp'],
                videos: ['mp4', 'mov', 'avi', 'wmv', 'mkv'],
                documents: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx']
            };

            function getFileExtension(filename) {
                return filename.split('.').pop().toLowerCase();
            }

            function getIconClass(extension) {
                if (allowedTypes.images.includes(extension)) return 'bi-file-image text-primary';
                if (allowedTypes.videos.includes(extension)) return 'bi-file-play text-warning';
                if (extension === 'pdf') return 'bi-file-earmark-pdf text-danger';
                if (['doc', 'docx'].includes(extension)) return 'bi-file-earmark-word text-primary';
                if (['xls', 'xlsx'].includes(extension)) return 'bi-file-earmark-excel text-success';
                if (['ppt', 'pptx'].includes(extension)) return 'bi-file-earmark-powerpoint text-danger';
                return 'bi-file-earmark-text'; // generic file icon
            }

            let totalSize = 0;

            // Convert FileList to array to allow modifications
            let filesArray = Array.from(fileInput.files);

            filesArray.forEach((file, index) => {
                totalSize += file.size;

                const extension = getFileExtension(file.name);
                const iconClass = getIconClass(extension);

                const div = document.createElement('div');
                div.className = 'd-flex align-items-center mb-2';
                div.dataset.index = index;

                const icon = document.createElement('i');
                icon.className = `bi ${iconClass} fs-3 me-2`;

                const nameSpan = document.createElement('span');
                nameSpan.textContent = file.name;

                const sizeSpan = document.createElement('span');
                sizeSpan.className = 'text-muted ms-3';
                sizeSpan.style.fontSize = '0.85rem';
                sizeSpan.textContent = `(${(file.size / (1024 * 1024)).toFixed(2)} MB)`;

                // Delete button
                const btnDelete = document.createElement('button');
                btnDelete.type = 'button';
                btnDelete.className = 'btn btn-outline-danger btn-sm ms-auto';
                btnDelete.textContent = 'Ã—';

                btnDelete.onclick = function () {
                    filesArray.splice(index, 1);

                    // Reset the files property of input
                    const dataTransfer = new DataTransfer();
                    filesArray.forEach(f => dataTransfer.items.add(f));
                    fileInput.files = dataTransfer.files;

                    // Re-trigger change event to refresh preview
                    fileInput.dispatchEvent(new Event('change'));
                };

                div.appendChild(icon);
                div.appendChild(nameSpan);
                div.appendChild(sizeSpan);
                div.appendChild(btnDelete);

                previewList.appendChild(div);
            });

            if (filesArray.length > 0) {
                const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
                const sizeDiv = document.createElement('div');
                sizeDiv.className = 'mt-2 fw-bold text-dark';
                sizeDiv.textContent = `Total File Size: ${totalSizeMB} MB`;
                previewList.appendChild(sizeDiv);
            }
        });
    </script>
}
